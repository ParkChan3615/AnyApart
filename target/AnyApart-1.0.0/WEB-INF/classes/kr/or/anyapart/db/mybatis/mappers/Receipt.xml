<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.anyapart.receipt.dao.ReceiptDAO">
	<sql id="moveoutWithClause">
		WITH COSTTOTAL AS (
			SELECT A.MEM_ID
  				   ,B.COST_YEAR
     			   ,B.COST_MONTH
			       ,B.COST_NO
			       ,COST_COMMON + COST_CLEANING + COST_SECURITY + COST_DISINFECT + COST_ELEVATOR COST_COMM_TOTAL
			       ,COST_PARK + COST_COMM_HEAT + COST_INDV_HEAT + COST_COMM_HOTWATER + COST_INDV_HOTWATER + COST_COMM_ELEC + COST_INDV_ELEC + COST_COMM_WATER + COST_INDV_WATER + COST_AS + COST_LAS + COST_COUNCIL COST_INDV_TOTAL
			  FROM RESIDENT A
			RIGHT OUTER JOIN MAINTENANCECOST B ON (A.MEM_ID = B.MEM_ID)
		)
	</sql>
	
	<sql id="moveoutFromClause">
		FROM RESIDENT A
		LEFT OUTER JOIN COSTTOTAL B ON (A.MEM_ID = B.MEM_ID)
		RIGHT OUTER JOIN RECEIPT C ON (B.COST_NO = C.COST_NO)
		INNER JOIN COMMONCODE D ON (C.RECEIPT_METHOD = D.CODE_ID)
	</sql>
	
	<sql id="moveoutWhereClause">
		<if test="searchDetail!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.memId)">
			WHERE A.MEM_ID = #{searchDetail.memId}
		</if>
	</sql>
	
	<select id="selectMoveoutReceiptCount" parameterType="kr.or.anyapart.vo.PagingVO" resultType="int">
		<include refid="moveoutWithClause"/>
		SELECT COUNT(*)
		<include refid="moveoutFromClause"/>
		<include refid="moveoutWhereClause"/>
	</select>
	
	
	<select id="selectMoveoutReceiptList" parameterType="kr.or.anyapart.vo.PagingVO" resultType="kr.or.anyapart.receipt.vo.ReceiptVO">
		<include refid="moveoutWithClause"/>
		SELECT BB.*
		FROM (
				SELECT ROWNUM RNUM,
				       AA.*
				       FROM (
							SELECT B.*        
							       ,CODE_NAME	RECEIPT_METHOD
							       ,RECEIPT_COST
							       , TO_CHAR(RECEIPT_DATE, 'YYYY-MM-DD') RECEIPT_DATE
							<include refid="moveoutFromClause"/>
							<include refid="moveoutWhereClause"/>
							ORDER BY RECEIPT_NO DESC) AA
				)BB
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<insert id="insertUnpaidCostForMoveout" parameterType="kr.or.anyapart.maintenancecost.vo.CostVO">
		<selectKey order="BEFORE" keyProperty="receiptNo" resultType="int">
			SELECT NVL(MAX(RECEIPT_NO), 0)+1
			FROM RECEIPT
		</selectKey>
		
		INSERT INTO receipt (
		    RECEIPT_NO,
		    COST_NO,
		    RECEIPT_METHOD,
		    RECEIPT_COST,
		    RECEIPT_DATE,
		    RECEIPT_YN
		) VALUES (
		    #{receiptNo, jdbcType=NUMERIC}
			, #{costNo, jdbcType=NUMERIC}
			, 'OFFICE'
			, #{costTotal, jdbcType=NUMERIC}+#{lateFee, jdbcType=NUMERIC}
			, sysdate
			, 'Y'
		)
	</insert>
	
	<sql id="paidSearchFrag">
	
		<trim prefix=" WHERE" prefixOverrides="AND">
			<if test="searchVO!=null and searchDetail!=null">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.dongStart)
			 				  and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.hoStart) 
			 				  and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.dongEnd)
			 				  and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.hoEnd)">
						AND E.HOUSE_CODE BETWEEN #{searchVO.searchAptCode}||'D'||#{searchDetail.dongStart}||'H'||#{searchDetail.hoStart}
												 AND #{searchVO.searchAptCode}||'D'||#{searchDetail.dongEnd}||'H'||#{searchDetail.hoEnd}
				</if>
					
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchAptCode)">
					 AND INSTR(C.MEM_ID, #{searchVO.searchAptCode}) > 0
				</if>
				
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.receiptDateStart)
						 and @org.apache.commons.lang3.StringUtils@isNotBlank(searchDetail.receiptDateEnd)">
					AND A.RECEIPT_DATE BETWEEN TO_DATE(#{searchDetail.receiptDateStart}, 'yyyy-MM-dd') 
										   AND TO_DATE(#{searchDetail.receiptDateEnd}, 'yyyy-MM-dd') 
				</if>
			</if>
		</trim>
	</sql>	
	<!-- 수납관리-수납조회 -->
	<select id="selectPaidReceiptCount" parameterType="kr.or.anyapart.vo.PagingVO" resultType="int">
		SELECT COUNT(*)
		  FROM RECEIPT A
		  INNER JOIN RECEIPT_METHOD B ON (A.RECEIPT_METHOD = B.CODE_ID) 
		  INNER JOIN V_MAINTENANCECOST C ON (A.COST_NO = C.COST_NO)
		  LEFT OUTER JOIN RESIDENT D ON (C.MEM_ID = D.MEM_ID)
		  LEFT OUTER JOIN HOUSE E ON (D.HOUSE_CODE = E.HOUSE_CODE)
		<include refid="paidSearchFrag"/>
		ORDER BY A.RECEIPT_DATE DESC, E.DONG DESC, E.HO ASC
	</select>
	
	<select id="selectPaidReceiptList" parameterType="kr.or.anyapart.vo.PagingVO" resultType="kr.or.anyapart.receipt.vo.ReceiptVO">
	  SELECT B.*
		FROM (
				 SELECT ROWNUM RNUM
		               , A.*
		          FROM (
						SELECT A.RECEIPT_NO
						       ,TO_CHAR(A.RECEIPT_DATE, 'yyyy-MM-dd') RECEIPT_DATE
						       ,C.COST_YEAR
						       ,C.COST_MONTH
						       ,E.DONG
						       ,E.HO
						       ,D.RES_NAME
						       ,C.COST_TOTAL
						       <![CDATA[
						       ,CASE WHEN C.COST_DUEDATE < A.RECEIPT_DATE THEN A.RECEIPT_COST - C.COST_TOTAL
						             ELSE 0 END LATE_FEE
						       ,A.RECEIPT_COST
						       ,CASE WHEN C.COST_DUEDATE < A.RECEIPT_DATE THEN '납기후'
						             ELSE '납기내' END RECEIPT_TYPE
						       ,B.CODE_NAME RECEIPT_METHOD
						       ]]>
						  FROM RECEIPT A
						  INNER JOIN RECEIPT_METHOD B ON (A.RECEIPT_METHOD = B.CODE_ID) 
						  INNER JOIN V_MAINTENANCECOST C ON (A.COST_NO = C.COST_NO)
						  LEFT OUTER JOIN RESIDENT D ON (C.MEM_ID = D.MEM_ID)
						  LEFT OUTER JOIN HOUSE E ON (D.HOUSE_CODE = E.HOUSE_CODE)
						<include refid="paidSearchFrag"/>
						ORDER BY A.RECEIPT_DATE DESC, E.DONG DESC, E.HO ASC
						) A
			        )B
			WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	
</mapper>